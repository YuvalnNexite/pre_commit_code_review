#!/usr/bin/env bash
# install.sh
set -euo pipefail

# Configuration: source repository that hosts the hook and memory files
SOURCE_REPO="YuvalnNexite/pre_commit_code_review"
RAW_BASE="https://raw.githubusercontent.com/${SOURCE_REPO}/main"

HOOK_NAME="code_review_pre-commit.sh"
GLOBAL_HOOKS_DIR="$HOME/.git-hooks"
HOOK_PATH="$GLOBAL_HOOKS_DIR/pre-commit"
BACKUP_PATH="$HOOK_PATH.pre_commit_code_review.backup"
STATE_FILE="$GLOBAL_HOOKS_DIR/.code_review_pre_commit_install_state"
MEMORY_DIR="$GLOBAL_HOOKS_DIR/code_review_memory"
MEMORY_TEMPLATE="$MEMORY_DIR/memory_template.txt"

compute_checksum() {
  local file="$1"

  if command -v sha256sum >/dev/null 2>&1; then
    sha256sum "$file" | awk '{print $1}'
  elif command -v shasum >/dev/null 2>&1; then
    shasum -a 256 "$file" | awk '{print $1}'
  elif command -v python3 >/dev/null 2>&1; then
    python3 - "$file" <<'PY'
import hashlib
import sys
from pathlib import Path

path = Path(sys.argv[1])
print(hashlib.sha256(path.read_bytes()).hexdigest())
PY
  else
    echo "Error: unable to compute checksum (missing sha256sum/shasum/python3)" >&2
    return 1
  fi
}

cleanup() {
  [ -n "${hook_tmp:-}" ] && rm -f "$hook_tmp"
  [ -n "${template_tmp:-}" ] && rm -f "$template_tmp"
}
trap cleanup EXIT

# Preserve knowledge from any previous installation
prev_memory_dir_created=0
prev_memory_template_installed=0
prev_memory_template_checksum=""

if [ -f "$STATE_FILE" ]; then
  # shellcheck disable=SC1090
  source "$STATE_FILE"
  prev_memory_dir_created=${memory_dir_created:-0}
  prev_memory_template_installed=${memory_template_installed:-0}
  prev_memory_template_checksum=${memory_template_checksum:-}
fi

backup_created=0
hook_checksum=""
memory_dir_created=$prev_memory_dir_created
memory_template_installed=$prev_memory_template_installed
memory_template_checksum=$prev_memory_template_checksum

echo "Installing pre-commit code review hook globally..."
echo "Source: ${SOURCE_REPO}"

# Create global hooks directory
mkdir -p "$GLOBAL_HOOKS_DIR"

hook_tmp="$(mktemp)"
template_tmp="$(mktemp)"

echo "Downloading hook script..."
curl -fsSL "${RAW_BASE}/hooks/${HOOK_NAME}" -o "$hook_tmp"

if [ -f "$HOOK_PATH" ] && ! cmp -s "$hook_tmp" "$HOOK_PATH"; then
  if [ -f "$BACKUP_PATH" ]; then
    echo "Existing backup found at $BACKUP_PATH; leaving it in place."
  else
    cp "$HOOK_PATH" "$BACKUP_PATH"
    backup_created=1
    echo "Backed up existing pre-commit hook to $BACKUP_PATH"
  fi
fi

mv "$hook_tmp" "$HOOK_PATH"
hook_tmp=""
chmod +x "$HOOK_PATH"
hook_checksum="$(compute_checksum "$HOOK_PATH")"

echo "Configuring git to use global hooks..."
git config --global core.hooksPath "$GLOBAL_HOOKS_DIR"

echo "Setting up global code review memory files..."
if [ ! -d "$MEMORY_DIR" ]; then
  mkdir -p "$MEMORY_DIR"
  memory_dir_created=1
  echo "Created $MEMORY_DIR"
else
  echo "Reusing existing directory $MEMORY_DIR"
fi

if curl -fsSL "${RAW_BASE}/code_review_memory/memory_template.txt" -o "$template_tmp"; then
  if [ -f "$MEMORY_TEMPLATE" ]; then
    if cmp -s "$template_tmp" "$MEMORY_TEMPLATE"; then
      mv "$template_tmp" "$MEMORY_TEMPLATE"
      template_tmp=""
      memory_template_installed=1
      memory_template_checksum="$(compute_checksum "$MEMORY_TEMPLATE")"
      echo "Updated memory template at $MEMORY_TEMPLATE"
    else
      echo "Existing memory template at $MEMORY_TEMPLATE differs; leaving it untouched."
      memory_template_installed=0
      memory_template_checksum=""
    fi
  else
    mv "$template_tmp" "$MEMORY_TEMPLATE"
    template_tmp=""
    memory_template_installed=1
    memory_template_checksum="$(compute_checksum "$MEMORY_TEMPLATE")"
    echo "Downloaded memory template to $MEMORY_TEMPLATE"
  fi
else
  echo "Warning: failed to download memory template." >&2
  memory_template_installed=0
  memory_template_checksum=""
fi

trap - EXIT
cleanup

echo "âœ… Global installation complete!"
echo ""
echo "Global hooks directory: $GLOBAL_HOOKS_DIR"
echo ""
echo "Next steps:"
echo "1. Install dependencies: pip install flake8"
echo "2. Install Gemini CLI: npm install -g @google/generative-ai-cli"
echo "3. Configure Gemini: gemini config set apiKey YOUR_API_KEY"
echo ""
echo "The hook will now run on every commit in ALL repositories!"
echo ""
echo "To uninstall: run ./uninstall.sh"

cat > "$STATE_FILE" <<EOF
# Autogenerated by install.sh - do not edit manually
backup_created=$backup_created
hook_checksum='$hook_checksum'
memory_dir_created=$memory_dir_created
memory_template_installed=$memory_template_installed
memory_template_checksum='$memory_template_checksum'
EOF
